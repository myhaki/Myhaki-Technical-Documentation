{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MyHaki","text":"Justice. Integrity. Accessibility. <p>A legal aid provision system for underserved pretrial detainees</p> Case Management. Pro Bono Tracking. Analytics. <p>Empowering LSK and lawyers for transparent justice delivery</p> Accessible Onboarding for All <p>Mobile-first for low-income families and lawyers</p> Informational Website See what's next MyHaki is an AI-driven case management system,   connecting lawyers with underserved pretrial detainees, streamlining access to legal aid and enabling the Law Society of Kenya to monitor case progress and incentivize lawyers through rewards thereby enhancing access to justice."},{"location":"#why-myhaki","title":"Why MyHaki?","text":"Agentic AI Case Filtration <p>Classifies, and prioritizes cases (civil/criminal, urgency) for fair assignment.</p> Geolocation Matching <p>Assigns lawyers based on proximity using LocationIQ and the Haversine formula.</p> Secure Android App for Lawyers &amp; Applicants <p>Mobile-first onboarding, case tracking, CPD points tracking, and case dashboards.</p> LSK Oversight Dashboard <p>Next.js-powered web interface for admin, compliance, analytics, and reporting.</p> Compliance &amp; Data Protection <p>Built on Legal Aid Act 2016 and Kenya Data Protection Act, with encrypted storage and audit trails.</p> API-First Architecture <p>All features accessible via robust REST APIs (see API Reference).</p>"},{"location":"#platform-highlights","title":"Platform Highlights","text":"Our Mission: Enhance access to justice for Kenya\u2019s most vulnerable.   Enable fast, fair, and transparent legal aid service delivery powered by technology. <p>Learn more about MyHaki on our Website. Ready to get started? Start here!</p>"},{"location":"ai/","title":"MyHaki Agent AI Integration","text":"<p>MyHaki Agent is an AI-powered legal assistant designed to help users access, understand, and summarize legal information with ease. It uses a Retrieval-Augmented Generation (RAG) pipeline that combines Supabase vector search and Google Gemini to deliver accurate, context-aware answers from legal documents. The system processes user queries by retrieving relevant chunks from a vector database and generating responses grounded in Kenyan legal texts, ensuring reliability for pre-trial detainees and legal professionals.</p>"},{"location":"ai/#ai-models","title":"AI Models","text":""},{"location":"ai/#legal-bert","title":"Legal-BERT","text":"<p>Specialized BERT model for legal text understanding and embeddings generation (<code>nlpaueb/legal-bert-base-uncased</code>).  </p> <p>How to Use: </p> <pre>\nfrom transformers import AutoTokenizer, AutoModel\nimport torch\n\ntokenizer = AutoTokenizer.from_pretrained(\"nlpaueb/legal-bert-base-uncased\")\nmodel = AutoModel.from_pretrained(\"nlpaueb/legal-bert-base-uncased\")\n\ninputs = tokenizer(text, return_tensors=\"pt\", padding=True, truncation=True, max_length=512)\n\nwith torch.no_grad():\noutputs = model(**inputs)\n\nembeddings = outputs.last_hidden_state.mean(dim=1).numpy().tolist() \n\n</pre> <p>Apply: Embed legal chunks (e.g., court judgments) and store in pgvector; query similarity for RAG retrieval.</p>"},{"location":"ai/#rag-pipeline","title":"RAG Pipeline","text":"<p>Retrieval-Augmented Generation for context-aware case processing (LangChain + Vector Search).  </p> <p>How to Use: </p> <pre>\nfrom langchain.vectorstores import Chroma\nfrom langchain.embeddings import HuggingFaceEmbeddings\n\nembeddings = HuggingFaceEmbeddings(model_name=\"nlpaueb/legal-bert-base-uncased\")\nvectorstore = Chroma.from_documents(docs, embeddings) # Load pre-embedded chunks\n\nfrom langchain.chains import RetrievalQA\nfrom langchain.llms import GoogleGenerativeAI\n\nllm = GoogleGenerativeAI(model=\"gemini-2.5-flash\")\nqa_chain = RetrievalQA.from_chain_type(llm, retriever=vectorstore.as_retriever(search_kwargs={\"k\": 5}))\n\nresult = qa_chain.run(\"Classify this case: [query text]\") # Outputs classification/urgency\n\n</pre> <p>Apply: Chain with Gemini for JSON outputs (case_type, urgency); handle multilingual by prompt engineering.</p>"},{"location":"ai/#gemini-llm","title":"Gemini LLM","text":"<p>Advanced language model for classification and reasoning (Gemini 2.5 Flash).  </p> <p>How to Use: </p> <pre> \nfrom google.generativeai import GenerativeModel, configure\nimport json\n\nconfigure(api_key=\"your_api_key\")\nmodel = GenerativeModel('gemini-2.5-flash')\n\nprompt = \"Analyze query and context for case_type, urgency, reasoning in JSON.\"\nresponse = model.generate_content(prompt)\n\nresult = json.loads(response.text) # Parse for {\"case_type\": \"civil\", \"urgency\": \"high\", \"reasoning\": \"...\"}\n\n</pre> <p>Apply: Use in RAG for structured outputs; override urgency with date rules (e.g., trial &lt;15 days = \"urgent\").</p>"},{"location":"ai/#data-pipeline-architecture","title":"Data Pipeline Architecture","text":"<p>Ingestion \u2192 Processing \u2192 Delivery</p>"},{"location":"ai/#pipeline-stages-detailed-usage","title":"Pipeline Stages (Detailed Usage):","text":"<ul> <li>Collection: Raw case data intake via API or upload (e.g., CSV/PDF/JSON); use Pandas for initial parsing:  </li> </ul> <pre>\nimport pandas as pd\ndf = pd.read_csv(\"legal_cases.csv\")\n\n</pre> <ul> <li> <p>Cleaning: Data normalization with regex/BeautifulSoup for text extraction; remove duplicates, handle missing fields.</p> </li> <li> <p>Chunking: Text segmentation (page/sentence/character-level) using LangChain:  </p> </li> </ul> <pre>\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\n\nsplitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)\nchunks = splitter.split_text(text)\n\n\n</pre> <ul> <li> <p>Embedding: Vector generation with Legal-BERT (as above); batch process for efficiency.</p> </li> <li> <p>Storage: Insert into Supabase pgvector for similarity searches:  </p> </li> </ul> <pre>\nfrom supabase import create_client\n\nclient = create_client(SUPABASE_URL, SUPABASE_KEY)\nclient.table(\"embeddings\").insert({\"id\": chunk_id, \"embedding\": embedding}).execute() \n\n\n</pre>"},{"location":"ai/#api-query-endpoint-fastapi-example","title":"API Query Endpoint (FastAPI Example)","text":"<pre> \nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.post(\"/query\")\ndef query_case(q: str):\nresults = vectorstore.similarity_search(q, k=5)\nreturn {\n\"chunks\": results,\n\"metadatas\": [r.metadata for r in results]\n}\n</pre>"},{"location":"ai/#technologies","title":"Technologies","text":""},{"location":"ai/#technology-stack","title":"Technology Stack:","text":"<ul> <li> <p>LangChain:   Framework for RAG apps; chain retrievers/LLMs.   Example: Use <code>RetrievalQA</code> to integrate Supabase vectorstore with Gemini. <pre>\nqa_chain.run(\"Classify case: [query]\") \n</pre> </p> </li> <li> <p>pgvector: PostgreSQL vector similarity extension; query embeddings efficiently. Example:  </p> </li> </ul> <pre>\nSELECT * FROM embeddings ORDER BY embedding &lt;=&gt; query_embedding LIMIT 5;\n</pre> <p>Executed via Supabase RPC for scalable searches on legal chunks.</p> <ul> <li>Hugging Face: Model hub and transformers library. Example: Load Sentence Transformers for quick embedding generation.  </li> </ul> <pre>\nfrom sentence_transformers import SentenceTransformer\nimport functools\n\n@functools.lru_cache()\ndef get_embedding_model():\nreturn SentenceTransformer(\"sentence-transformers/all-mpnet-base-v2\")\n</pre>"},{"location":"ai/#deployment-process","title":"Deployment Process","text":""},{"location":"ai/#ai-agent-deployment-fastapi","title":"AI Agent Deployment (FastAPI)","text":"<ul> <li> <p>Platform: Google Cloud Platform (Cloud Run) for scalable, serverless hosting. Selected after Heroku\u2019s space limits to manage variable LSK loads.</p> </li> <li> <p>Build: Dockerized FastAPI microservice providing endpoints (e.g., case query/classification), using stateless containers for fast scaling.</p> </li> <li> <p>Environment Variables: Securely managed in Google Cloud Secret Manager (e.g., <code>GEMINI_API_KEY</code>, <code>SUPABASE_URL</code>); loaded in code with <code>os.getenv</code> to avoid exposure.</p> </li> <li> <p>Scaling: Auto-scales via Cloud Run with 1Gi memory and port 8080; handles spikes from user submissions.</p> </li> <li> <p>Monitoring: Google Cloud Monitoring for logs and alerts (e.g., &gt;5s latency alerts); health check implemented with <code>curl</code> for uptime.</p> </li> </ul>"},{"location":"ai/#deployment-steps-concise-usage","title":"Deployment Steps (Concise Usage):","text":"<ul> <li> <p>Push to Feature Branches/PRs: GitHub triggers reviews; merging to <code>main</code> activates deployment pipeline.</p> </li> <li> <p>GitHub Actions CI/CD: Verifies tests and lint, builds Docker image.</p> </li> </ul> <p>Sample YAML snippet:</p> <pre>\nname: Deploy FastAPI App\non:\npush:\nbranches:\n- feature/myhaki_predictive_agent\n\njobs:\ndeploy:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v4\n- uses: google-github-actions/auth@v2\nwith:\ncredentials_json: '${{ secrets.GCP_SA_KEY }}'\n- uses: google-github-actions/setup-gcloud@v2\n- run: |\ngcloud run deploy myhaki-agent\n--image docker.io/${{ secrets.IMAGE_NAME }}:tag\n--project \"${{ secrets.GCP_PROJECT_ID }}\"\n--region europe-west1\n--allow-unauthenticated\n--port 8080\n--memory 1Gi\n--set-env-vars GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }},SUPABASE_URL=${{ secrets.SUPABASE_URL }}\n\n</pre> <ul> <li> <p>Explanation: Automates checkout, authentication, and deployment; pulls Docker image from Docker Hub; sets environment variables securely.</p> </li> <li> <p>Merge Triggers Deployment: </p> </li> </ul> <pre>\n  Build and push to Google Container Registry (GCR):  \ndocker tag myhaki-agent gcr.io/project-id/myhaki-agent:tag\ndocker push gcr.io/project-id/myhaki-agent:tag\n\n</pre> <ul> <li>Auto-Deployment: </li> </ul> <pre>\ngcloud run deploy --image gcr.io/project-id/myhaki-agent:tag --platform managed --allow-unauthenticated --port 8080\n</pre>"},{"location":"ai/#secrets-access-at-runtime","title":"Secrets Access at Runtime","text":"<pre>\nfrom google.cloud import secretmanager\n\nclient = secretmanager.SecretManagerServiceClient()\nresponse = client.access_secret_version(name=\"projects/project-id/secrets/gemini-key/versions/latest\")\napi_key = response.payload.data.decode(\"UTF-8\")\n\n</pre> <ul> <li>Explanation: Fetches secrets at runtime to prevent leaks.</li> </ul>"},{"location":"ai/#health-and-monitoring","title":"Health and Monitoring","text":"<ul> <li>Dockerfile Health Check:</li> </ul> <pre>\nHEALTHCHECK CMD curl --fail http://localhost:8080/ || exit 1\n\n</pre> <ul> <li>Explanation: Periodically probes the FastAPI endpoint for readiness; integrates with Google Cloud Monitoring alerts.</li> </ul>"},{"location":"api-reference/","title":"MyHaki API Reference","text":"<p>Welcome to the MyHaki API Reference! Here you\u2019ll find everything needed to integrate, test, and explore the REST endpoints powering MyHaki\u2019s AI-driven legal aid system.</p>"},{"location":"api-reference/#database-schema","title":"Database Schema","text":"<p>Designed for maintainability, access control, and performance using PostgreSQL - Core tables: users, lawyers, detainees, cases, assignments, CPD points, vector embeddings (pgvector)</p> <p></p>"},{"location":"api-reference/#live-api-docs","title":"Live API Docs","text":"<ul> <li>Swagger UI: View Swagger Documentation</li> </ul>"},{"location":"api-reference/#main-endpoints","title":"Main Endpoints","text":"<p>All endpoints are RESTful, return JSON, and require token authentication unless noted.</p>"},{"location":"api-reference/#authentication-user-management","title":"Authentication &amp; User Management","text":"<pre>\nPOST   /register-lawyer/           # Lawyer signup (sets verified)\nPOST   /signup/                    # Applicant signup\nPOST   /login/                     # Login, returns authentication token\nPOST   /logout/                    # Logout (invalidate token)\n</pre>"},{"location":"api-reference/#password-management","title":"Password Management","text":"<pre>\nPOST   /forgotpassword/           # Initiate password reset (OTP email)\nPOST   /verifycode/               # Verify OTP code\nPOST   /resetpassword/            # Set new password (after OTP)\n</pre>"},{"location":"api-reference/#case-detainee-management","title":"Case &amp; Detainee Management","text":"<pre>\nPOST   /cases/                    # Submit a new case (triggers AI pipeline)\nGET    /cases/                    # List/search cases (admin, lawyer)\nGET    /cases/{case_id}/          # Get case details\nGET    /case-assignments/my-cases/    # See assigned cases (lawyer)\nPOST   /case-assignments/         # Assign case to lawyer (AI)\n</pre>"},{"location":"api-reference/#lawyer-cpd-management","title":"Lawyer &amp; CPD Management","text":"<pre>\nGET    /lawyers/                  # List all lawyers (admin)\nGET    /lawyers/{lawyer_id}/      # View lawyer profile\nGET    /cpd-points/               # Lawyer\u2019s CPD history\nGET    /cpd-points/{lawyer_id}/   # CPD details for lawyer (admin)\n</pre>"},{"location":"api-reference/#ai-integration-endpoints","title":"AI &amp; Integration Endpoints","text":"<pre>\nPOST   /ai/classify-case/         # Classify case type + urgency (internal, triggers on /cases/)\nPOST   /ai/embed-case/            # Store case vector embedding (pgvector, internal)\nPOST   /ai/translate/             # Translate case description (Kiswahili &lt;-&gt; English)\n</pre>"},{"location":"api-reference/#admin-analytics","title":"Admin &amp; Analytics","text":"<pre>\nGET    /admin/dashboard/          # Real-time analytics (cases/month, resolution time)\nGET    /audit-logs/               # View all user actions (admin only)\nGET    /users/                    # List all users (admin, RBAC)\n</pre>"},{"location":"api-reference/#example-api-usage","title":"Example API Usage","text":""},{"location":"api-reference/#lawyer-registration","title":"Lawyer Registration","text":"<pre>\nPOST /register-lawyer/\n{\n  \"email\": \"loice@example.com\",\n  \"password\": \"2345!!pass\",\n  \"practice_number\": \"LSK/2025/12345\",\n  \"first_name\": \"Loice\",\n  \"last_name\": \"Nekesa\"\n}\n</pre>"},{"location":"api-reference/#case-submission-with-ai","title":"Case Submission (with AI)","text":"<pre>\nPOST /cases/\n{\n  \"detainee_id\": 102,\n  \"case_description\": \"Nilishikwa na polisi kwa tuhuma za wizi...\",\n  \"trial_date\": \"2025-10-15\",\n  \"location\": \"Kisumu Police Station\"\n}\n</pre>"},{"location":"api-reference/#password-reset","title":"Password Reset","text":"<pre>\nPOST /forgotpassword/\n{\n  \"email\": \"user@example.com\"\n}\n</pre>"},{"location":"api-reference/#api-testing-documentation","title":"API Testing &amp; Documentation","text":"<ul> <li>All endpoints are documented in Swagger UI.</li> <li>Use Postman to test flows (import OpenAPI spec).</li> <li>Screenshots above show real UI and dashboard flows.</li> </ul>"},{"location":"api-reference/#security-authentication","title":"Security &amp; Authentication","text":"<ul> <li>All endpoints require token authentication (see <code>/login/</code> for authentication token).</li> <li>To authenticate requests, include the token in the HTTP header:</li> </ul> <p>Authorization: Token {your_token_here}</p> <ul> <li>Store API keys and secrets in environment variables (<code>.env</code>). Never commit secrets to your repository.  </li> <li>Role-Based Access Control restricts endpoint access by user type.  </li> <li>All sensitive data (tokens, passwords) are encrypted at rest.</li> </ul>"},{"location":"api-reference/#error-handling-status-codes","title":"Error Handling &amp; Status Codes","text":"<ul> <li>200 OK: Success  </li> <li>201 Created: Resource successfully created  </li> <li>400 Bad Request: Invalid input  </li> <li>401 Unauthorized: Invalid or missing authentication token  </li> <li>403 Forbidden: Insufficient permissions (RBAC)  </li> <li>404 Not Found: Resource does not exist  </li> <li>500 Internal Server Error: Unexpected backend error</li> </ul>"},{"location":"api-reference/#api-versioning-roadmap","title":"API Versioning &amp; Roadmap","text":"<ul> <li>Current Version: <code>v1</code> </li> <li>Upcoming: <code>/v2/</code> will include expanded endpoints for court integration, offline/USSD support, and enhanced analytics.</li> </ul>"},{"location":"api-reference/#more-information","title":"More Information","text":"<ul> <li>For a full list of endpoints and model schemas, see Developer Docs.  </li> <li>For platform architecture, AI, and integrations, see Developer Docs and Integrations.  </li> <li>For brand assets and guidelines, contact the design team or see Brand Guideline Screenshot.</li> </ul>"},{"location":"api-reference/#deployment-process","title":"Deployment Process","text":""},{"location":"api-reference/#backend-deployment-django-rest-api","title":"Backend Deployment (Django REST API)","text":"<ul> <li>Naming:</li> <li>snake_case for variables, functions, files</li> <li>PascalCase for classes and models</li> <li>Structure: Place serializers/views in separate files unless tightly coupled.</li> <li>Testing: Use Django\u2019s built-in test runner (<code>python manage.py test</code>), aim for &gt;90% coverage.</li> <li>API: Follow REST conventions, use OpenAPI schema.</li> <li>Security: Validate all input, use Django\u2019s CSRF and authentication mechanisms.</li> <li>Platform: Heroku (Staging &amp; Production)</li> <li>Branch: Deploy from <code>main</code></li> <li>Environment Variables: Managed securely in Heroku dashboard; never commit secrets</li> <li>Scaling: Automatic scaling via Heroku dynos based on demand</li> <li>Rollback: Previous stable releases can be redeployed via Heroku dashboard</li> </ul> <p>Steps</p> <ul> <li>Development and code changes happen on feature branches.  </li> <li>GitHub Actions run automated tests and linting upon each push.  </li> <li>Merging into the <code>main</code> branch triggers a Heroku deployment.  </li> <li>Heroku pulls the latest code and deploys it to the staging or production environment.  </li> <li>Environment variables and secrets are securely managed within the Heroku dashboard, never committed to code.  </li> <li>Heroku Dynos scale automatically based on live traffic demands.  </li> <li>In the event of deployment issues, rollback to previous stable releases is possible directly from the Heroku dashboard. </li> </ul>"},{"location":"api-reference/#references-further-reading","title":"References &amp; Further Reading","text":"<ul> <li>TranslatePlus API Docs</li> <li>LocationIQ API</li> <li>Gemini (Google AI) Docs</li> <li>Celery &amp; Redis Docs</li> <li>pgvector for PostgreSQL</li> <li>MyHaki API Reference</li> </ul>"},{"location":"brand-guideline/","title":"Brand Guideline","text":""},{"location":"brand-guideline/#logo-usage","title":"Logo Usage","text":"<ul> <li>Always use the official MyHaki logo (<code>images/myhaki-logo.png</code>) with proper clear space and sizing.</li> <li>Do not distort, recolor, or overlay the logo on busy backgrounds.</li> </ul>"},{"location":"brand-guideline/#official-colors","title":"Official Colors","text":"Name HEX Usage Deep Red #621616 Primary, Buttons, Links Brown #A87352 Accent, Highlights Cream #F6E9E0 Backgrounds, Banners Dark #232f3e Text, Icons"},{"location":"brand-guideline/#typography","title":"Typography","text":"<ul> <li>Headings: Poppins, Bold</li> <li>Body: Poppins, Regular</li> <li>Code: Fira Mono</li> </ul>"},{"location":"brand-guideline/#imagery-icons","title":"Imagery &amp; Icons","text":"<ul> <li>Use law-themed imagery: gavels, scales, parchment.</li> <li>Avoid stock photos unrelated to justice or Kenya.</li> </ul>"},{"location":"brand-guideline/#voice-messaging","title":"Voice &amp; Messaging","text":"<ul> <li>Values: Justice, Integrity, Accessibility</li> <li>Tone: Trustworthy, inclusive, authoritative</li> </ul>"},{"location":"brand-guideline/#example-application","title":"Example Application","text":"<ul> <li>Android app and dashboard use deep red banners, rounded cards, and Poppins font.</li> <li>All interfaces show the logo on splash and navigation.</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v100-2025-10-01","title":"v1.0.0 (2025-10-01)","text":"<ul> <li>Initial MVP release: Android app, LSK admin dashboard, Django REST backend.</li> <li>Core features: case submission, lawyer assignment, CPD tracking, AI case filtration, password reset, onboarding flows.</li> <li>Integrations: TranslatePlus, LocationIQ, Gemini (Google ADK), Celery/Redis, pgvector.</li> <li>Schema finalized for PostgreSQL; migrated from ChromaDB.</li> <li>Full QA cycle completed; coverage &gt;90%.</li> </ul>"},{"location":"changelog/#planned-for-v110","title":"Planned for v1.1.0","text":"<ul> <li>RAG system for advanced search</li> <li>Offline mode/USSD fallback</li> <li>iOS app beta</li> <li>Automated legal education chatbot</li> <li>Enhanced reporting for LSK dashboard</li> </ul>"},{"location":"code-standards/","title":"Code Standards","text":"<ul> <li>Linting:</li> <li>Prettier + ESLint for frontend</li> <li>ktlint for Android/Kotlin</li> <li>flake8 and black for backend</li> <li>Pull Requests:</li> <li>Write clear summaries for every PR</li> <li>Link related issues (use <code>Fixes #issue_num</code>)</li> <li>At least one reviewer before merging</li> <li>Pass all CI checks (tests, lint)</li> <li>Documentation:</li> <li>Use JSDoc (frontend), KDoc (Android), Python docstrings (backend)</li> <li>Update README and feature docs for major changes</li> <li>Branding &amp; Design:</li> <li>Follow MyHaki brand guidelines for colors, typography, logos<ul> <li>See Brand Guideline Reference</li> </ul> </li> <li>Keep UI consistent with Figma designs</li> </ul>"},{"location":"code-standards/#accessibility-values","title":"Accessibility &amp; Values","text":"<ul> <li>Accessibility: All UIs must be usable by keyboard, screen reader, and on low-bandwidth devices.</li> <li>Values: Code and UI should always reflect MyHaki\u2019s core values: Justice, Integrity, Accessibility.</li> </ul>"},{"location":"code-standards/#best-practices","title":"Best Practices","text":"<ul> <li>Keep functions and components small, focused and reusable.</li> <li>Prefer composition over inheritance.</li> <li>Avoid commented-out code in committed files.</li> <li>Refactor and remove unused code regularly.</li> <li>Always run lint and all tests before pushing or merging.</li> <li>Use environment variables for secrets (never commit credentials).</li> </ul>"},{"location":"code-standards/#references","title":"References","text":"<ul> <li>Brand Guideline</li> <li>API Reference</li> <li>Developer Docs</li> <li>QA Process</li> </ul>"},{"location":"compliance/","title":"Compliance &amp; Legal","text":""},{"location":"compliance/#kenya-data-protection-act-kdpa","title":"Kenya Data Protection Act (KDPA)","text":"<ul> <li>All user data encrypted at rest and in transit (AES-256, TLS 1.3)</li> <li>Digital consent forms in Kiswahili &amp; English</li> <li>Data minimization: only collect essential fields</li> <li>Anonymization for deleted users</li> </ul>"},{"location":"compliance/#legal-aid-act-2016","title":"Legal Aid Act 2016","text":"<ul> <li>MyHaki case assignment and reporting built for legal aid compliance</li> <li>LSK dashboard supports audit logs, reporting, and oversight</li> </ul>"},{"location":"compliance/#audit-security-controls","title":"Audit &amp; Security Controls","text":"<ul> <li>Immutable audit logs for every action</li> <li>Regular vulnerability scans (OWASP ZAP)</li> <li>Breach notification protocol (ODPC within 72h)</li> </ul>"},{"location":"compliance/#user-rights","title":"User Rights","text":"<ul> <li>Users can request data deletion and correction</li> <li>All actions are logged and reviewed for fairness</li> </ul>"},{"location":"compliance/#contact","title":"Contact","text":"<ul> <li>Compliance support: myhaki@gmail.com</li> </ul>"},{"location":"deployment-process/","title":"Deployment Process","text":""},{"location":"deployment-process/#frontend-deployment-lsk-dashboard-informational-site","title":"Frontend Deployment (LSK Dashboard &amp; Informational Site)","text":"<ul> <li>Platform: Vercel (Next.js/Tailwind)</li> <li>Branch: Auto-deployment from <code>main</code></li> <li>Environment Variables: Managed securely via <code>.env</code> in Vercel dashboard</li> <li>Build &amp; Preview: Each PR triggers preview builds; production deploys on merge to <code>main</code></li> <li>Brand Compliance: Ensure final builds use MyHaki colors, fonts, and logo (see Brand Guideline)</li> </ul> <p>Steps</p> <ul> <li>Developers create feature branches from the <code>main</code> branch to work on updates.  </li> <li>Code changes are committed and pushed to the remote repository.  </li> <li>A Pull Request (PR) is opened targeting the <code>main</code> branch.  </li> <li>Vercel automatically generates preview builds for each PR, allowing team members to review the changes live.  </li> <li>Reviewers perform tests and validate the UI and functionality.  </li> <li>Brand compliance is enforced by verifying the use of MyHaki colors, fonts, and logo according to the brand guidelines.  </li> <li>After approval, the PR is merged into <code>main</code>.  </li> <li>Vercel initiates an automatic production deployment from <code>main</code>.  </li> <li>Environment variables are injected securely during build time from the Vercel dashboard <code>.env</code>.  </li> <li>Final validation confirms the live site aligns with brand requirements and functions correctly.  </li> </ul>"},{"location":"deployment-process/#mobile-deployment-android-app","title":"Mobile Deployment (Android App)","text":"<ul> <li>Platform: Google Play Console (Production), Firebase App Distribution (Testing)</li> <li>Build: Release builds via Gradle (<code>assembleRelease</code>), signed with team keystore</li> <li>Environment Variables: API URLs, keys stored in <code>local.properties</code> and encrypted secrets</li> <li>CI: GitHub Actions runs unit/UI tests on push; releases only after passing all tests</li> <li>Brand Compliance: All assets, colors, and typography must match MyHaki guidelines</li> </ul> <p>Steps</p> <ul> <li>Feature development occurs on dedicated branches.  </li> <li>Changes are pushed to GitHub, triggering automated unit and UI tests through GitHub Actions.  </li> <li>Upon successful tests, the Gradle build process is initiated using <code>assembleRelease</code>.  </li> <li>The generated APK is signed using the team\u2019s keystore.  </li> <li>Environment variables such as API URLs and keys are securely managed via <code>local.properties</code> and encrypted secrets.  </li> <li>Release APKs are distributed through two channels:  </li> <li>Firebase App Distribution for testing builds.  </li> <li>Google Play Console for production release.  </li> <li>Prior to submission, all assets and UI elements are verified to meet MyHaki\u2019s brand compliance standards.  </li> <li>The production APK is published officially on Google Play after all validations. </li> </ul>"},{"location":"deployment-process/#backend-deployment-django-rest-api","title":"Backend Deployment (Django REST API)","text":"<ul> <li>Platform: Heroku (Staging &amp; Production)</li> <li>Branch: Deploy from <code>main</code></li> <li>Environment Variables: Managed securely in Heroku dashboard; never commit secrets</li> <li>Scaling: Automatic scaling via Heroku dynos based on demand</li> <li>Rollback: Previous stable releases can be redeployed via Heroku dashboard</li> </ul> <p>Steps</p> <ul> <li>Development and code changes happen on feature branches.  </li> <li>GitHub Actions run automated tests and linting upon each push.  </li> <li>Merging into the <code>main</code> branch triggers a Heroku deployment.  </li> <li>Heroku pulls the latest code and deploys it to the staging or production environment.  </li> <li>Environment variables and secrets are securely managed within the Heroku dashboard, never committed to code.  </li> <li>Heroku Dynos scale automatically based on live traffic demands.  </li> <li>In the event of deployment issues, rollback to previous stable releases is possible directly from the Heroku dashboard. </li> </ul>"},{"location":"deployment-process/#ai-agent-deployment-fastapi","title":"AI Agent Deployment (FastAPI)","text":"<ul> <li>Platform: Google Cloud Platform (Cloud Run, GKE, or Compute Engine)</li> <li>Build: Dockerized FastAPI microservice</li> <li>Environment Variables: Managed in Google Cloud Secret Manager</li> <li>Scaling: Automatic scaling via Google Cloud Run/GKE</li> <li>Monitoring: Use Google Cloud Monitoring for logs, alerts, and uptime</li> </ul> <p>Steps</p> <ul> <li>Developers push changes on feature branches and open PRs.  </li> <li>GitHub Actions verify code quality, run tests, lint, and build Docker images upon each push.  </li> <li>After tests are successful, merging into <code>main</code> triggers deployment pipelines.  </li> <li>Docker images are pushed to Google Container Registry.  </li> <li>Automatic deployment happens on Google Cloud Run, GKE, or Compute Engine.  </li> <li>Environment variables and secrets are managed securely in Google Cloud Secret Manager.  </li> <li>Monitoring is handled through Google Cloud Monitoring for logs, uptime, and alert notifications to maintain service reliability.  </li> </ul>"},{"location":"deployment-process/#cicd-pipeline","title":"CI/CD Pipeline","text":"<ul> <li>Tool: GitHub Actions</li> <li>Pre-Deployment: All codebases run tests, build, and lint checks before deploy</li> <li>Automation: Automatic deployment on merge to <code>main</code></li> <li>Status: Build/test status visible in PRs and repository dashboard</li> <li>Security: Secrets scanned before deploy, API keys never exposed</li> </ul> <p>Steps</p> <ul> <li>Code pushed to feature or <code>main</code> branches triggers GitHub Actions workflows.  </li> <li>Workflows run tests, build processes, and static analysis (linting).  </li> <li>Secrets and API keys are scanned to prevent leaks before deployment.  </li> <li>Only code passing all validations can be merged into the <code>main</code> branch.  </li> <li>Merging to <code>main</code> automatically starts deployment of respective components.  </li> <li>Real-time build and deployment statuses are displayed on pull requests and repository dashboards.  </li> <li>Failures in tests or security scans immediately block deployments, ensuring only stable code is delivered. </li> </ul>"},{"location":"deployment-process/#deployment-flow-diagram","title":"Deployment Flow Diagram","text":""},{"location":"deployment-process/#release-checklist","title":"Release Checklist","text":"<ul> <li> All tests passing (unit, integration, UI)</li> <li> Linting with zero errors</li> <li> Secrets verified (no <code>.env</code> in repo)</li> <li> Brand assets up to date</li> <li> Team notified of release</li> </ul>"},{"location":"deployment-process/#references","title":"References","text":"<ul> <li>Brand Guideline</li> <li>Code Standards</li> <li>QA Process</li> <li>API Reference</li> </ul>"},{"location":"developer-docs/","title":"Developer Docs","text":"<p>Comprehensive documentation for developers building, testing, and deploying the MyHaki platform. Learn about architecture, workflows, integrations, and best practices for reliable legal tech.</p>"},{"location":"developer-docs/#system-architecture","title":"System Architecture","text":"<ul> <li>Frontend: Next.js + Tailwind CSS (LSK dashboard, responsive informational website)</li> <li>Mobile: Android app (MVVM, Jetpack Compose, Koin DI, Retrofit)</li> <li>Backend: Django REST Framework (Python), internal REST APIs</li> <li>Database: PostgreSQL with pgvector for AI embeddings</li> <li>Integrations: </li> <li>TranslatePlus (form translation to English for AI)</li> <li>LocationIQ (police station geocoding)</li> <li>Agentic AI (Python + Google ADK/Gemini for case classification/prioritization)</li> <li>Celery + Redis (automated case assignment)</li> <li>Testing: Unit &amp; integration tests (Postman, pytest, JUnit, Compose Test)</li> <li>CI/CD: GitHub Actions automates tests and deployment (Heroku for API, Vercel for dashboard/web, Google Cloud for FastAPI agent)</li> <li>Branding: All UI follows MyHaki brand guidelines (see Brand Guideline)</li> </ul>"},{"location":"developer-docs/#env-usage-secrets-management","title":".env Usage &amp; Secrets Management","text":"<ul> <li>Sensitive values (API keys, secrets) are stored in <code>.env</code> files and never committed to source control.</li> <li>Use environment variables for config overrides (dev, staging, production).</li> <li>Django loads <code>.env</code> via <code>python-dotenv</code>.</li> <li>Next.js uses <code>process.env.VAR_NAME</code>.</li> <li>FastAPI agent uses Google Cloud Secret Manager or <code>.env</code>.</li> </ul>"},{"location":"developer-docs/#automated-testing","title":"Automated Testing","text":"<ul> <li>Backend: Unit and integration tests for models, views, APIs using <code>pytest</code>, <code>unittest</code>, and Postman for endpoint validation.</li> <li>Frontend: Component and API tests using Jest and React Testing Library.</li> <li>Android: Unit tests (JUnit, MockK), UI tests (Compose Test).</li> <li>Test coverage: All codebases report coverage in CI.</li> <li>Commands:   ```bash   # Backend   python manage.py test   pytest --cov=backend</li> </ul> <p># Frontend   npm test   npm run coverage</p> <p># Android   ./gradlew test   ./gradlew connectedAndroidTest   ```</p>"},{"location":"developer-docs/#branching-pr-workflow","title":"Branching &amp; PR Workflow","text":"<ul> <li>Feature branches: <code>feature/xxx</code></li> <li>Bugfix branches: <code>bugfix/xxx</code></li> <li>PR reviews required for all merges to <code>main</code></li> <li>Descriptive PR titles, linked issues (<code>Fixes #issue_num</code>)</li> <li>Checklist: All tests pass, lint passes</li> </ul>"},{"location":"developer-docs/#directory-structure","title":"Directory Structure","text":"<ul> <li><code>frontend/</code> \u2014 Next.js dashboard and informational website</li> <li><code>backend/</code> \u2014 Django REST API</li> <li><code>android/</code> \u2014 Android app (Compose, MVVM, Koin)</li> <li><code>agent/</code> \u2014 FastAPI microservice (Agentic AI, Google ADK/Gemini)</li> <li><code>docs/</code> \u2014 Documentation, brand guidelines</li> <li><code>tests/</code> \u2014 All tests and testing utilities</li> </ul>"},{"location":"features/","title":"Platform Features","text":"<p>Explore the core features of MyHaki, designed to streamline access to legal aid for pretrial detainees, empower lawyers, and enable the Law Society of Kenya (LSK) to monitor and coordinate justice delivery.</p>"},{"location":"features/#1-case-application-tracking-android-app","title":"1. Case Application &amp; Tracking (Android App)","text":"<ul> <li>Accessible Case Submission:   Detainees and their families submit case applications via the Android app, entering personal details, case descriptions, and supporting documents.</li> <li>Eligibility &amp; Verification:   The app guides users through basic eligibility checks and captures proof for legal aid.</li> <li>Status Updates &amp; Notifications:   Users receive real-time notifications for every case event\u2014verification, assignment, in-progress, and resolution.</li> <li>Secure Messaging:   Communicate directly with assigned lawyers inside the app.</li> <li>Low-End Device Support:   Optimized for informal settlements and low-income users.</li> </ul>"},{"location":"features/#2-lawyer-android-app-dashboard","title":"2. Lawyer Android App Dashboard","text":"<ul> <li>Assigned Case Management:   Lawyers access a dashboard showing all cases assigned to them, updated in real time.</li> <li>Case Details &amp; Progress Reporting:   View case specifics, update statuses, submit progress reports, and communicate securely with clients.</li> <li>CPD Points &amp; Rewards:   Track Continuing Professional Development points earned via pro bono work.</li> <li>Real-Time Notifications:   Receive alerts about new cases, deadlines, and messages.</li> </ul>"},{"location":"features/#3-ai-assisted-case-filtration-assignment","title":"3. AI-Assisted Case Filtration &amp; Assignment","text":"<ul> <li>Agentic AI Filtration:   AI automatically filters and prioritizes cases (civil, criminal, urgency) using NLP and Kenyan legal data.</li> <li>TranslatePlus Integration:   Kiswahili case descriptions are translated to English, improving classification accuracy.</li> <li>Geolocation Matching (LocationIQ):   Police station addresses are geocoded, enabling proximity-matching between detainees and lawyers.</li> <li>Automated Assignment:   Celery + Redis automate lawyer assignment based on specialty, location, and workload, using Haversine formula for distance calculations.</li> <li>Equitable Distribution:   The system prevents lawyer overload and ensures fair case allocation.</li> </ul>"},{"location":"features/#4-lsk-admin-dashboard-web","title":"4. LSK Admin Dashboard (Web)","text":"<ul> <li>Oversight &amp; Case Monitoring:   LSK administrators view all active cases, assignments, and lawyer activities.</li> <li>Reporting &amp; Analytics:   Monthly reports, dashboards, and charts show case volumes, resolution times, lawyer performance, and assignment metrics.</li> <li>Reward Management:   Allocate and manage CPD points for lawyer activities.</li> <li>Compliance &amp; Audit Logging:   Track all actions for regulatory compliance and transparent governance.</li> </ul>"},{"location":"features/#5-secure-authentication-communication-data-management","title":"5. Secure Authentication, Communication &amp; Data Management","text":"<ul> <li>Role-Based Access Control:   Segregated interfaces and permissions for detainees, lawyers, and LSK admins.</li> <li>Encrypted Data Storage:   All sensitive data (case records, messages, tokens) is encrypted at rest and in transit.</li> <li>Audit Trails:   Every user action and system event is logged for analytics and compliance.</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Welcome to MyHaki! This guide walks you through onboarding, authentication, and password management for Applicants (Detainees/Families), Lawyers, and LSK Admins\u2014with real API snippets and backend code.</p>"},{"location":"getting-started/#1-user-onboarding-flows","title":"1. User Onboarding Flows","text":""},{"location":"getting-started/#a-lawyer-onboarding-android-app","title":"A. Lawyer Onboarding (Android App)","text":"<ul> <li>Fields: Practice Number, First Name, Last Name, Email Address, Password</li> </ul> <p>API Endpoint: </p> <pre>POST /register-lawyer/</pre> <p>Sample Request (from Swagger):</p> <pre>\n{\n  \"practice_number\": \"LSK/2025/008989\",\n  \"first_name\": \"Loice\",\n  \"last_name\": \"Nekesa\",\n  \"email\": \"loice.lawyer@example.com\",\n  \"password\": \"Password123@\"\n}\n</pre> <p>Sample Response:</p> <pre>\n{\n  \"practice_number\": \"LSK/2025/008989\",\n  \"first_name\": \"Loice\",\n  \"last_name\": \"Nekesa\",\n  \"email\": \"loice.lawyer@example.comm\",\n  \"verified\": true\n}\n</pre> <p> </p>"},{"location":"getting-started/#b-applicantdetainee-onboarding-android-app","title":"B. Applicant/Detainee Onboarding (Android App)","text":"<ul> <li>Fields: First Name, Last Name, Email, Password, Role</li> </ul> <p>API Endpoint: </p> <pre>POST /signup/</pre> <p>Sample Request (from Swagger):</p> <pre>\n{\n  \"first_name\": \"Fiona\",\n  \"last_name\": \"Wesonga\",\n  \"email\": \"fiona.applicant@example.com\",\n  \"password\": \"Password123@\",\n  \"role\": \"applicant\"\n}\n</pre> <p>Sample Response:</p> <pre>\n{\n  \"id\": 11,\n  \"first_name\": \"Fiona\",\n  \"last_name\": \"Wesonga\",\n  \"email\": \"fiona.applicant@example.com\",\n  \"role\": \"applicant\",\n  \"created_at\": \"2025-10-01T20:41:01Z\"\n}\n</pre> <p> </p>"},{"location":"getting-started/#2-authentication-security","title":"2. Authentication &amp; Security","text":"<p>Login API (All Users): </p> <pre>POST /login/</pre> <p>Sample Request: </p> <pre>\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"Password123@\"\n}\n</pre> <p>Sample Response: </p> <pre>\n{\n  \"token\": \"authentication-token-string\"\n}\n</pre>"},{"location":"getting-started/#3-forgot-password-otp-verification-reset-flow-all-users","title":"3. Forgot Password, OTP Verification &amp; Reset Flow (All Users)","text":"<p>Step 1: Initiate Password Reset </p> <pre>POST /forgotpassword/</pre> <pre>\n{\n  \"email\": \"user@example.com\"\n}\n</pre> <p>Response:</p> <pre>\n{\n  \"message\": \"Password reset code sent.\"\n}\n</pre> <p>Step 2: Verify Code </p> <pre>POST /verifycode/</pre> <pre>\n{\n  \"email\": \"user@example.com\",\n  \"code\": \"1234\"\n}\n</pre> <p>Response:</p> <pre>\n{\n  \"detail\": \"Code verified. Proceed to reset password.\"\n}\n</pre> <p>Step 3: Reset Password </p> <pre>POST /resetpassword/</pre> <pre>\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"NewSecurePassword@\"\n}\n</pre> <p>Response:</p> <pre>\n{\n  \"detail\": \"Password reset successful.\"\n}\n</pre> <p> </p>"},{"location":"getting-started/#4-first-steps-after-login","title":"4. First Steps After Login","text":"<ul> <li>Applicants: </li> <li>Submit new case applications, upload documents, and track case status.</li> <li> <p>Receive notifications for every case update.</p> </li> <li> <p>Lawyers: </p> </li> <li>View assigned cases, update progress, submit reports, and monitor CPD points.</li> <li> <p>Real-time notifications for new assignments and deadlines.</p> </li> <li> <p>LSK Admins: </p> </li> <li>Monitor overall case flow, assign lawyers, and generate compliance reports.</li> </ul>"},{"location":"getting-started/#5-security-support","title":"5. Security &amp; Support","text":"<ul> <li>All authentication flows use secure HTTPS and encrypted storage.</li> <li>For help, access support via the app or dashboard.</li> </ul> <p>Code standards</p> <ul> <li>Architecture: MVVM, repository pattern, Koin for DI.</li> <li>Naming:</li> <li>camelCase for variables and methods</li> <li>PascalCase for classes, composables, ViewModels</li> <li>SCREAMING_SNAKE_CASE for constants</li> <li>File Structure: Group by feature, separate data/model/viewmodel/ui.</li> <li>Testing: Use JUnit, MockK for unit tests; Compose Test for UI.</li> <li>Dependency Injection: Always inject dependencies via Koin modules.</li> <li>Secure Storage: Use EncryptedSharedPreferences for sensitive data.</li> <li>Accessibility: Use Compose\u2019s accessibility APIs for labels, hints, focus.</li> </ul>"},{"location":"getting-started/#code-structure","title":"Code Structure","text":""},{"location":"getting-started/#deployment-process","title":"Deployment Process","text":""},{"location":"getting-started/#mobile-deployment-android-app","title":"Mobile Deployment (Android App)","text":"<ul> <li>Platform: Google Play Console (Production), Firebase App Distribution (Testing)</li> <li>Build: Release builds via Gradle (<code>assembleRelease</code>), signed with team keystore</li> <li>Environment Variables: API URLs, keys stored in <code>local.properties</code> and encrypted secrets</li> <li>CI: GitHub Actions runs unit/UI tests on push; releases only after passing all tests</li> <li>Brand Compliance: All assets, colors, and typography must match MyHaki guidelines</li> </ul> <p>Steps</p> <ul> <li>Feature development occurs on dedicated branches.  </li> <li>Changes are pushed to GitHub, triggering automated unit and UI tests through GitHub Actions.  </li> <li>Upon successful tests, the Gradle build process is initiated using <code>assembleRelease</code>.  </li> <li>The generated APK is signed using the team\u2019s keystore.  </li> <li>Environment variables such as API URLs and keys are securely managed via <code>local.properties</code> and encrypted secrets.  </li> <li>Release APKs are distributed through two channels:  </li> <li>Firebase App Distribution for testing builds.  </li> <li>Google Play Console for production release.  </li> <li>Prior to submission, all assets and UI elements are verified to meet MyHaki\u2019s brand compliance standards.  </li> <li>The production APK is published officially on Google Play after all validations. </li> </ul>"},{"location":"integrations/","title":"Integrations","text":"<p>Detailed documentation for integrating MyHaki with our core APIs and external services\u2014TranslatePlus, LocationIQ, Agentic AI (Gemini), Celery/Redis, and PostgreSQL/pgvector. This guide covers setup, configuration, API usage, troubleshooting, and law-themed best practices.</p>"},{"location":"integrations/#translateplus-integration-kiswahili-english","title":"TranslatePlus Integration (Kiswahili \u2192 English)","text":"<p>Overview: TranslatePlus enables real-time translation of Kiswahili case descriptions to English, powering AI-driven case classification.</p> <p>Steps: 1. API Key Setup    - Obtain your TranslatePlus API key from the official portal.    - Store securely in <code>.env</code>:      <code>TRANSLATEPLUS_API_KEY=your_api_key</code></p> <ol> <li> <p>Sample API Call <code>python    import requests    response = requests.post(        \"https://api.translateplus.com/translate\",        headers={\"Authorization\": f\"Token {TRANSLATEPLUS_API_KEY}\"},        json={            \"text\": \"Kukamatwa wakati wa maandamano\",            \"source\": \"sw\",            \"target\": \"en\"        }    )    print(response.json())</code></p> </li> <li> <p>API Endpoint (Backend): <pre>POST /ai/translate/</pre> </p> </li> <li> <p>Troubleshooting:</p> </li> <li>401 Unauthorized: Check API key validity.</li> <li> <p>Slow response: Use glossary uploads for legal terms.</p> </li> <li> <p>Best Practices:</p> </li> <li>Never log API keys.</li> <li>Validate all input/output for legal compliance.</li> </ol>"},{"location":"integrations/#locationiq-integration-geocoding","title":"LocationIQ Integration (Geocoding)","text":"<p>Overview: Converts police station names into latitude/longitude for proximity-based lawyer assignment.</p> <p>Steps: 1. API Key Setup    - Register at LocationIQ and obtain your API key.    - Store securely in <code>.env</code>:      <code>LOCATIONIQ_API_KEY=your_api_key</code></p> <ol> <li> <p>Sample API Call <code>python    import requests    response = requests.get(        \"https://us1.locationiq.com/v1/search.php\",        params={            \"key\": LOCATIONIQ_API_KEY,            \"q\": \"Kisumu Police Station\",            \"format\": \"json\"        }    )    coords = response.json()[0]    print(coords)  # {'lat': '-0.0894', 'lon': '34.7594', ...}</code></p> </li> <li> <p>API Endpoint (Backend): <pre>GET /location/geocode/</pre> </p> </li> <li> <p>Troubleshooting:</p> </li> <li>Empty results: Check spelling/format of station names.</li> <li> <p>Rate limit: Monitor usage and set alerts.</p> </li> <li> <p>Best Practices:</p> </li> <li>Use Haversine formula for accurate distance calculations.</li> <li>Store coordinates in PostgreSQL for analytics.</li> </ol>"},{"location":"integrations/#agentic-ai-integration-gemini-reasoning-engine","title":"Agentic AI Integration (Gemini Reasoning Engine)","text":"<p>Overview: Uses Google Gemini (Agentic AI) to classify cases, prioritize urgency, and match lawyers to detainees.</p> <p>Steps: 1. API Key Setup    - Enable Gemini API in your Google AI account.    - Store key securely in <code>.env</code>:      <code>GEMINI_API_KEY=your_api_key</code></p> <ol> <li> <p>Sample API Call <code>python    import requests    headers = {\"Authorization\": f\"Token {GEMINI_API_KEY}\"}    data = {        \"case_description\": \"Arrested during protest\",        \"trial_date\": \"2025-10-02\",        \"location\": \"Nairobi\"    }    response = requests.post(\"https://gemini.googleapis.com/v1/classify\", json=data, headers=headers)    print(response.json())  # {'category': 'criminal', 'priority': 'high'}</code></p> </li> <li> <p>API Endpoint (Backend): <pre>POST /ai/classify-case/</pre> </p> </li> <li> <p>Best Practices:</p> </li> <li>Anonymize sensitive data before sending.</li> <li>Log AI decisions for audit and fairness.</li> </ol>"},{"location":"integrations/#celery-redis-automated-assignment","title":"Celery + Redis (Automated Assignment)","text":"<p>Overview: Automates assignment of cases to lawyers based on location, availability, and expertise.</p> <p>Steps: 1. Setup    - Install Celery and Redis in your backend environment.    - Configure Celery worker for Django:      <code>python      # settings.py      CELERY_BROKER_URL = 'redis://localhost:6379/0'      CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'</code></p> <ol> <li> <p>Sample Task <code>python    from myhaki.tasks import assign_case_to_lawyer    assign_case_to_lawyer.delay(case_id=123)</code></p> </li> <li> <p>API Endpoint: <pre>POST /case-assignments/</pre> </p> </li> <li> <p>Best Practices:</p> </li> <li>Monitor assignment queue for overload.</li> <li>Log assignment decisions for transparency.</li> </ol>"},{"location":"integrations/#postgresql-pgvector-embeddings-data-storage","title":"PostgreSQL + pgvector (Embeddings &amp; Data Storage)","text":"<p>Overview: Stores case, lawyer, and embedding data for semantic search and analytics.</p> <p>Steps: 1. Setup    - Ensure PostgreSQL 14+ with pgvector extension installed.    - Migrate Django models for embedding storage.</p> <ol> <li> <p>Sample Storage <code>python    from pgvector.django import VectorField    class CaseEmbedding(models.Model):        embedding_vector = VectorField(dimensions=768)        case = models.ForeignKey(Case, on_delete=models.CASCADE)</code></p> </li> <li> <p>Best Practices:</p> </li> <li>Index embeddings for efficient search.</li> <li>Regularly backup database for compliance.</li> </ol>"},{"location":"integrations/#general-troubleshooting-lawful-practices","title":"General Troubleshooting &amp; Lawful Practices","text":"<ul> <li>Use <code>.env</code> for all secrets and credentials.</li> <li>Never expose API keys or sensitive tokens.</li> <li>Encrypt all data in transit and at rest.</li> <li>Log all integration actions for audit.</li> <li>Monitor API usage to prevent abuse.</li> <li>Validate all external data for compliance with Kenya\u2019s Data Protection Act.</li> <li>Test integrations in sandbox before production.</li> </ul>"},{"location":"integrations/#references-further-reading","title":"References &amp; Further Reading","text":"<ul> <li>TranslatePlus API Docs</li> <li>LocationIQ API</li> <li>Gemini (Google AI) Docs</li> <li>Celery &amp; Redis Docs</li> <li>pgvector for PostgreSQL</li> <li>MyHaki API Reference</li> </ul>"},{"location":"qa-process/","title":"Quality Assurance Process","text":""},{"location":"qa-process/#myhaki-qa-philosophy","title":"MyHaki QA Philosophy","text":"<p>MyHaki is committed to reliable, secure, and accessible legal technology. Our QA process ensures every system component\u2014from backend APIs to mobile onboarding flows\u2014meets the highest standards for justice sector digital platforms.</p>"},{"location":"qa-process/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit Testing</li> <li>Backend: Django REST Framework, pytest/unittest for all models, serializers, and API endpoints.</li> <li>Android App: JUnit &amp; MockK for ViewModels, repositories, and API integration; Jetpack Compose UI tested with <code>createComposeRule()</code>.</li> <li>Frontend: Jest, React Testing Library for Next.js dashboard.</li> <li>Integration Testing</li> <li>End-to-end flows tested: case submission, AI filtration, assignment, CPD, password reset, onboarding.</li> <li>API contract validation with Postman for all endpoints.</li> <li>External integrations (TranslatePlus, LocationIQ, Gemini, Celery/Redis) are mocked and tested with synthetic and real legal datasets.</li> <li>Performance &amp; Load Testing</li> <li>JMeter for backend scalability (1,000 concurrent cases/month).</li> <li>SQL query profiling during development to verify migration, data integrity, and attribute updates.</li> <li>Security &amp; Compliance</li> <li>OWASP ZAP for vulnerability scanning.</li> <li>Manual checks for KDPA and Legal Aid Act compliance.</li> <li>Data encryption (AES-256/TLS 1.3) and anonymization verified.</li> <li>Regression &amp; User Acceptance Testing (UAT)</li> <li>Automated regression runs on every CI/CD pipeline.</li> <li>Manual UAT with LSK admins/lawyers before major releases.</li> <li>Sprint QA tracked in ClickUp: planning, retrospectives, defect tracking, sign-off.</li> </ul>"},{"location":"qa-process/#test-data-management","title":"Test Data Management","text":"<ul> <li>Real &amp; Synthetic Data</li> <li>Synthetic legal cases, lawyers, and detainee profiles generated for load and integration.</li> <li>Real court reports, penal codes, and anonymized Kenya Law JSON used for model and API validation.</li> <li>Chunking &amp; Embedding</li> <li>Text chunking with LangChain\u2019s RecursiveCharacterTextSplitter for RAG system tests.</li> <li>Embedding migration tested from ChromaDB to pgvector for scalability and storage efficiency.</li> </ul>"},{"location":"qa-process/#continuous-integration-code-review","title":"Continuous Integration &amp; Code Review","text":"<ul> <li>CI/CD Pipeline</li> <li>GitHub Actions automates lint, unit/integration tests, and deployments for all codebases (backend, Android, dashboard, AI agent).</li> <li>FastAPI agent deployment reliability tested via pipeline automation.</li> <li>Code Review</li> <li>All PRs require 2+ reviews and passing checks for lint, test coverage (&gt;90%), build, and documentation.</li> <li>Feature, bugfix, and documentation branches tracked with semantic versioning (MVP, Phase 2 roadmap).</li> <li>Defect Tracking</li> <li>ClickUp for defect logging, regression, and sprint QA sign-off.</li> </ul>"},{"location":"qa-process/#monitoring-logging-alerting","title":"Monitoring, Logging &amp; Alerting","text":"<ul> <li>Monitoring Tools</li> <li>Sentry for error tracking on frontend/backend.</li> <li>Heroku, Vercel, and Google Cloud logs for real-time monitoring.</li> <li>Custom dashboard visualizes case assignment rates, API latency, and AI accuracy.</li> <li>Alerting</li> <li>Slack/Email alerts for:<ul> <li> <p>5% API error rate</p> </li> <li>AI accuracy drops below threshold</li> <li>Unassigned cases after 48h</li> </ul> </li> </ul>"},{"location":"qa-process/#release-criteria-success-metrics","title":"Release Criteria &amp; Success Metrics","text":"<ul> <li> <p>95% pass rate on critical tests</p> </li> <li>F1 &gt; 0.85 for AI classification</li> <li>99.9% uptime</li> <li>80%+ user satisfaction in UAT</li> <li>All tests, lint, and security/compliance checks pass before release</li> </ul>"},{"location":"qa-process/#references-live-docs","title":"References &amp; Live Docs","text":"<ul> <li>Swagger/OpenAPI Live API Docs</li> <li>Postman Collection</li> <li>ClickUp QA Board (internal)</li> <li>MyHaki Product Documentation</li> </ul>"},{"location":"schema/","title":"Database Schema","text":""},{"location":"schema/#core-tables","title":"Core Tables","text":"<ol> <li>users_user<ul> <li>user_id (PK), email, role, first_name, last_name, phone_number, is_deleted, created_at</li> </ul> </li> <li>lawyers_lawyer<ul> <li>lawyer_id (PK), user_id (FK), practice_number, specialization (JSON), latitude, longitude, verified</li> </ul> </li> <li>detainees_detainee<ul> <li>detainee_id (PK), user_id (FK), first_name, last_name, id_number, gender, relation_to_applicant</li> </ul> </li> <li>cases_case<ul> <li>case_id (PK), detainee_id (FK), case_description, predicted_case_type, predicted_urgency_level, trial_date, latitude, longitude, stage, status</li> </ul> </li> <li>case_assignments_caseassignment<ul> <li>assignment_id (PK), case_id (FK), lawyer_id (FK), is_assigned, confirmed_by_applicant/lawyer, reject_reason</li> </ul> </li> <li>cpd_points_cpdpoint<ul> <li>cpd_id (PK), lawyer_id (FK), case_id (FK), points_earned, description</li> </ul> </li> <li>vector_embeddings (pgvector)<ul> <li>embedding_id (PK), case_id (FK), embedding_vector (VECTOR(768)), content, source</li> </ul> </li> </ol>"},{"location":"schema/#relationships","title":"Relationships","text":"<ul> <li>User \u2192 Lawyer (1:1)</li> <li>User (applicant) \u2192 Detainee (1:N)</li> <li>Detainee \u2192 Case (1:N)</li> <li>Case \u2192 CaseAssignment (1:N)</li> <li>Lawyer \u2192 CaseAssignment (1:N)</li> <li>Case \u2192 CPDPoint (1:1)</li> <li>Case \u2192 VectorEmbedding (1:N)</li> </ul>"},{"location":"web/","title":"Frontend web","text":""},{"location":"web/#1-user-onboarding-flows","title":"1. User Onboarding Flows","text":""},{"location":"web/#lsk-admin-onboarding-web-dashboard","title":"LSK Admin Onboarding (Web Dashboard)","text":"<ul> <li>Fields: Email, Password</li> </ul> <p>API Endpoint: </p> <pre>POST /login/</pre> <p>Sample Request (from Swagger):</p> <pre>\n{\n  \"email\": \"admin.lsk@example.com\",\n  \"password\": \"Password123@\"\n}\n</pre> <p>Sample Response:</p> <pre>\n{\n  \"token\": \"authentication-token-string\"\n}\n</pre> <p> </p>"},{"location":"web/#2-authentication-security","title":"2. Authentication &amp; Security","text":"<p>Login API (All Users): </p> <pre>POST /login/</pre> <p>Sample Request: </p> <pre>\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"Password123@\"\n}\n</pre> <p>Sample Response: </p> <pre>\n{\n  \"token\": \"authentication-token-string\"\n}\n</pre>"},{"location":"web/#3-forgot-password-otp-verification-reset-flow-all-users","title":"3. Forgot Password, OTP Verification &amp; Reset Flow (All Users)","text":"<p>Step 1: Initiate Password Reset </p> <pre>POST /forgotpassword/</pre> <pre>\n{\n  \"email\": \"user@example.com\"\n}\n</pre> <p>Response:</p> <pre>\n{\n  \"message\": \"Password reset code sent.\"\n}\n</pre> <p>Step 2: Verify Code </p> <pre>POST /verifycode/</pre> <pre>\n{\n  \"email\": \"user@example.com\",\n  \"code\": \"1234\"\n}\n</pre> <p>Response:</p> <pre>\n{\n  \"detail\": \"Code verified. Proceed to reset password.\"\n}\n</pre> <p>Step 3: Reset Password </p> <pre>POST /resetpassword/</pre> <pre>\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"NewSecurePassword@\"\n}\n</pre> <p>Response:</p> <pre>\n{\n  \"detail\": \"Password reset successful.\"\n}\n</pre> <p> </p>"},{"location":"web/#4-first-steps-after-login","title":"4. First Steps After Login","text":"<ul> <li>Applicants: </li> <li>Submit new case applications, upload documents, and track case status.</li> <li> <p>Receive notifications for every case update.</p> </li> <li> <p>Lawyers: </p> </li> <li>View assigned cases, update progress, submit reports, and monitor CPD points.</li> <li> <p>Real-time notifications for new assignments and deadlines.</p> </li> <li> <p>LSK Admins: </p> </li> <li>Monitor overall case flow, assign lawyers, and generate compliance reports.</li> </ul>"},{"location":"web/#5-security-support","title":"5. Security &amp; Support","text":"<ul> <li>All authentication flows use secure HTTPS and encrypted storage.</li> <li>For help, access support via the app or dashboard.</li> </ul> <p>Code standards</p> <ul> <li>Components: Always use functional components for consistency and performance.</li> <li>Naming:</li> <li>camelCase for variables and functions</li> <li>PascalCase for component names</li> <li>SCREAMING_SNAKE_CASE for constants</li> <li>Files: One component per file. Group by feature/module for maintainability.</li> <li>Testing: Use Jest and React Testing Library for unit tests; add tests for each new component or logic.</li> <li>Styling: Tailwind CSS only. Avoid inline styles unless absolutely necessary.</li> <li>Accessibility: All UI should meet WCAG AA standards. Use semantic HTML and aria attributes.</li> </ul>"},{"location":"web/#code-structure","title":"Code Structure","text":""},{"location":"web/#deployment-process","title":"Deployment Process","text":""},{"location":"web/#frontend-deployment-lsk-dashboard-informational-site","title":"Frontend Deployment (LSK Dashboard &amp; Informational Site)","text":"<ul> <li>Platform: Vercel (Next.js/Tailwind)</li> <li>Branch: Auto-deployment from <code>main</code></li> <li>Environment Variables: Managed securely via <code>.env</code> in Vercel dashboard</li> <li>Build &amp; Preview: Each PR triggers preview builds; production deploys on merge to <code>main</code></li> <li>Brand Compliance: Ensure final builds use MyHaki colors, fonts, and logo (see Brand Guideline)</li> </ul> <p>Steps</p> <ul> <li>Developers create feature branches from the <code>main</code> branch to work on updates.  </li> <li>Code changes are committed and pushed to the remote repository.  </li> <li>A Pull Request (PR) is opened targeting the <code>main</code> branch.  </li> <li>Vercel automatically generates preview builds for each PR, allowing team members to review the changes live.  </li> <li>Reviewers perform tests and validate the UI and functionality.  </li> <li>Brand compliance is enforced by verifying the use of MyHaki colors, fonts, and logo according to the brand guidelines.  </li> <li>After approval, the PR is merged into <code>main</code>.  </li> <li>Vercel initiates an automatic production deployment from <code>main</code>.  </li> <li>Environment variables are injected securely during build time from the Vercel dashboard <code>.env</code>.  </li> <li>Final validation confirms the live site aligns with brand requirements and functions correctly.  </li> </ul>"}]}